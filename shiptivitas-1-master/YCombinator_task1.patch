--- Board.js	2020-07-19 11:49:30.000000000 +0530
+++ Board_modified.js	2020-07-19 11:46:35.000000000 +0530
@@ -2,6 +2,8 @@
 import 'dragula/dist/dragula.css';
 import Swimlane from './Swimlane';
 import './Board.css';
+//import dragula from 'react-dragula';
+import Dragula from 'dragula';
 
 export default class Board extends React.Component {
   constructor(props) {
@@ -74,4 +76,63 @@
       </div>
     )
   }
+  componentDidMount() {
+         this.drake = Dragula([
+           this.swimlanes.backlog.current,
+           this.swimlanes.inProgress.current,
+           this.swimlanes.complete.current,
+         ]);
+         this.drake.on('drop', (el, target, source, sibling) => this.updateClient(el, target, source, sibling));
+       }
+     
+       componentWillUnmount() {
+         this.drake.remove();
+       }
+     
+       /**
+        * Change the status of client when a Card is moved
+        */
+       updateClient(el, target, _, sibling) {
+         // Reverting DOM changes from Dragula
+         this.drake.cancel(true);
+     
+         // Find out which swimlane the Card was moved to
+         let targetSwimlane = 'backlog';
+         if (target === this.swimlanes.inProgress.current) {
+           targetSwimlane = 'in-progress';
+         } else if (target === this.swimlanes.complete.current) {
+           targetSwimlane = 'complete';
+         }
+     
+         // Create a new clients array
+         const clientsList = [
+           ...this.state.clients.backlog,
+           ...this.state.clients.inProgress,
+           ...this.state.clients.complete,
+         ];
+         const clientThatMoved = clientsList.find(client => client.id === el.dataset.id);
+         const clientThatMovedClone = {
+           ...clientThatMoved,
+           status: targetSwimlane,
+         };
+     
+         // Remove ClientThatMoved from the clientsList
+         const updatedClients = clientsList.filter(client => client.id !== clientThatMovedClone.id);
+     
+         // Place ClientThatMoved just before the sibling client, keeping the order
+         const index = updatedClients.findIndex(client => sibling && client.id === sibling.dataset.id);
+         updatedClients.splice(index === -1 ? updatedClients.length : index , 0, clientThatMovedClone);
+     
+         // Update React state to reflect changes
+         this.setState({
+           clients: {
+             backlog: updatedClients.filter(client => !client.status || client.status === 'backlog'),
+             inProgress: updatedClients.filter(client => client.status && client.status === 'in-progress'),
+             complete: updatedClients.filter(client => client.status && client.status === 'complete'),
+           }
+         });
+       }
 }
+
+
+//dragula([document.getElementById(left), document.getElementById(right)]);
\ No newline at end of file
